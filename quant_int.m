function [otsu_area_array, int_int_array, log_array] = quant_int(directory)
%%quant_int Use multithresh to separate signal from noise for CDC14 and
%%CBF5 fluorescent signals and perform quantitative intensity analysis on
%%the signal-labeled pixels.
%
%   input :
%       directory : A string variable pointing to the directory containing
%       the cropped, fluorescent images
%
%   outputs :
%       otsu_area_array : An array variable containing the area in pixels of
%       each image after multithresh-thresholding.
%
%       int_int_array : An array variable containing the integrated
%       intensity values of the signals above the threshold.
%
%       log_array : An array variable containing sum of the values
%       generated by applying the default Laplacian or Gaussian kernel to
%       the maximum intensity projection and removing the background signal
%       pixels.
%% Read in image
gfp_files = dir(fullfile(directory, '*.tif'));
%% Pre-allocate array variables
otsu_area_array = zeros([1,size(gfp_files,1)]);
int_int_array = zeros([1,size(gfp_files,1)]);
log_array = zeros([1,size(gfp_files,1)]);
for n = 1:size(gfp_files,1)
    filename = fullfile(gfp_files(n).folder,gfp_files(n).name);
    %open image with readTiffStack
    im = readTiffStack(filename);
    %convert image to double
    imdbl = double(im);
    %% Generate MIP
    %create a max-projection of the image (mip)
    mip = max(imdbl,[],3);
    %% Find and NaN out zero values from MetaMorph Cropping
    if sum(mip(:) == 0) > 0
        mip(mip == 0) = nan;
        warning('%s contains values of zeros', filename);
    end
    %% Fix border problems
    %some borders were accidentally drawn on the margins of images
    %need to filter these out
    %get the locations of brightest pixels
    [~, idx] = max(mip(:));
    [row, col] = ind2sub(size(mip), idx);
    if row == 1 || col == 1 || row == size(mip,1) || col == size(mip, 2)
        warning('%s brightest pixel on border, excluding from analysis',...
            filename);
        otsu_area_array(n) = nan;
        int_int_array(n) = nan;
        log_array(n) = nan;
        continue;
    end
    %% OTSU thresholding
    thresh = multithresh(mip,2);
    otsu_bin = mip >= thresh(end);
    otsu_area_array(n) = sum(otsu_bin(:));
    %% Filter out background
    mip_filtered = mip .* otsu_bin;
    mip_filtered(mip_filtered == 0) = nan;
    int_int_array(n) = sum(mip_filtered(:), 'omitnan');
    %% LoG imFilter for detecting local changes in intensity
    h = fspecial('log');
    corr_im = imfilter(mip, h);
    log_array(n) = sum(corr_im(:).*otsu_bin(:));
%     % Show the binary mask
%         f = figure('WindowState', 'maximized');
%         subplot(1,2,1);
%         imshow(mip, []);
%         subplot(1,2,2);
%         imshow(otsu_bin, []);
%         waitforbuttonpress;
%         close(f);
end